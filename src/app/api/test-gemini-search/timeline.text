import React, { useState, useEffect, useCallback } from 'react';
import { Timeline, Spin, Button, message } from 'antd'; // Added Button and message
import { CheckCircle, Clock, Loader2, XCircle, Play, RotateCcw } from 'lucide-react'; // Added Play and RotateCcw

// Assumed: Ant Design's CSS is imported globally, e.g., in your main index.js or App.js
// import 'antd/dist/reset.css'; // Or antd.min.css

// Data for the timeline steps
const initialThinkingStatesData = [
  {
    id: 1,
    title: "Initializing process",
    status: "pending", // pending, processing, completed, error
    description: "Preparing system for operation.",
  },
  {
    id: 2,
    title: "Fetching initial data",
    status: "waiting",
    description: "Retrieving necessary information.",
  },
  {
    id: 3,
    title: "Analyzing data integrity",
    status: "waiting",
    description: "Verifying consistency and accuracy.",
  },
  {
    id: 4,
    title: "Executing core logic",
    status: "waiting",
    description: "Running primary computations or actions.",
  },
  {
    id: 5,
    title: "Finalizing results",
    status: "waiting",
    description: "Preparing the output for completion.",
  },
];

// The ThinkingTimeline component
const ThinkingTimeline = ({ isProcessing, onComplete }) => {
  const [thinkingStates, setThinkingStates] = useState(() => 
    initialThinkingStatesData.map(s => ({...s, status: 'waiting'}))
  );
  const [currentStep, setCurrentStep] = useState(0);

  // Effect to initialize or reset the timeline based on isProcessing
  useEffect(() => {
    if (!isProcessing) {
      setCurrentStep(0);
      setThinkingStates(initialThinkingStatesData.map(s => ({ ...s, status: 'waiting' })));
      return;
    }

    // Initialize for a new process when isProcessing becomes true
    if (isProcessing && (currentStep === 0 || thinkingStates.every(s => s.status === 'waiting' || s.status === 'completed'))) {
       setCurrentStep(0); 
       setThinkingStates(initialThinkingStatesData.map((s, i) => ({
        ...s,
        status: i === 0 ? 'pending' : 'waiting' 
      })));
    }
  }, [isProcessing]); // Rerun when isProcessing changes

  // Effect to manage the step-by-step progression of the timeline
  useEffect(() => {
    if (!isProcessing || currentStep >= thinkingStates.length) {
      if (currentStep >= thinkingStates.length && isProcessing) {
        onComplete(); // Call onComplete when all steps are done
      }
      return;
    }
    
    // Ensure current step is 'pending' before 'processing'
    if (thinkingStates[currentStep]?.status === 'waiting') {
        setThinkingStates(prevStates =>
            prevStates.map((state, index) =>
                index === currentStep ? { ...state, status: 'pending' } : state
            )
        );
    }

    // Timer logic for step progression
    const kickOffDelay = (thinkingStates[currentStep]?.status === 'pending' || currentStep === 0) ? 500 : 0;

    const kickOffTimer = setTimeout(() => {
        setThinkingStates(prevStates =>
            prevStates.map((state, index) =>
                index === currentStep ? { ...state, status: 'processing' } : state
            )
        );

        const processingTimer = setTimeout(() => {
            setThinkingStates(prevStates =>
                prevStates.map((state, index) =>
                    index === currentStep ? { ...state, status: 'completed' } : state
                )
            );

            if (currentStep < thinkingStates.length - 1) {
                const nextStepDelayTimer = setTimeout(() => {
                    setCurrentStep(prev => prev + 1);
                }, 1000); // 1-second pause before next step
                return () => clearTimeout(nextStepDelayTimer);
            } else {
                onComplete(); // All steps completed
            }
        }, 2000); // 2 seconds processing time

        return () => clearTimeout(processingTimer);
    }, kickOffDelay); // 0.5s for pending state or immediate if not first step

    return () => {
        clearTimeout(kickOffTimer);
    };

  }, [isProcessing, currentStep, thinkingStates, onComplete]);

  // Function to get the appropriate icon based on status
  const getTimelineIcon = (status) => {
    switch (status) {
      case 'completed':
        return <CheckCircle className="text-green-500" size={20} />;
      case 'processing':
        return <Loader2 className="text-blue-500 animate-spin" size={20} />;
      case 'error': // Example, not currently implemented in state flow
        return <XCircle className="text-red-500" size={20} />;
      case 'pending':
      case 'waiting':
      default:
        return <Clock className="text-gray-400" size={20} />;
    }
  };

  // Function to get the color for the timeline item dot
  const getTimelineColor = (status) => {
    switch (status) {
      case 'completed': return 'green';
      case 'processing': return 'blue';
      case 'error': return 'red';
      default: return 'gray';
    }
  };

  return (
    <div className="thinking-timeline md:my-8 my-5 p-6 bg-white dark:bg-gray-800 shadow-xl rounded-lg border border-gray-200 dark:border-gray-700 w-full max-w-md">
      <h3 className="text-xl font-semibold mb-6 text-gray-700 dark:text-gray-200">Processing Steps</h3>
      <Timeline mode="left">
        {thinkingStates.map((state) => (
          <Timeline.Item
            key={state.id}
            dot={getTimelineIcon(state.status)}
            color={getTimelineColor(state.status)}
            className="pb-4" 
          >
            <div className="timeline-item ml-4">
              <h4 className="font-medium text-gray-800 dark:text-gray-100 text-base">{state.title}</h4>
              <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">{state.description}</p>
              {state.status === 'processing' && <Spin size="small" className="ml-2" />}
            </div>
          </Timeline.Item>
        ))}
      </Timeline>
    </div>
  );
};

// Standalone App component to demonstrate the ThinkingTimeline
const StandaloneThinkingTimelineApp = () => {
  const [isProcessing, setIsProcessing] = useState(false);

  const handleToggleProcessing = () => {
    setIsProcessing(prev => !prev);
    if (!isProcessing) {
      message.info('Timeline process started!');
    } else {
      message.info('Timeline process reset.');
    }
  };

  const handleTimelineCompletion = useCallback(() => {
    message.success('All timeline steps completed!');
    setIsProcessing(false); // Optionally reset or allow manual reset
  }, []);

  return (
    <div className="flex flex-col items-center justify-center min-h-screen bg-slate-100 dark:bg-slate-900 p-4 font-sans">
      <div className="mb-6">
        <Button 
          type="primary" 
          size="large"
          icon={isProcessing ? <RotateCcw size={18} /> : <Play size={18} />}
          onClick={handleToggleProcessing}
          className="flex items-center justify-center shadow-lg hover:shadow-xl transition-shadow duration-300"
        >
          {isProcessing ? 'Reset Timeline' : 'Start Timeline'}
        </Button>
      </div>
      <ThinkingTimeline 
        isProcessing={isProcessing} 
        onComplete={handleTimelineCompletion} 
      />
       <footer className="text-center mt-10 py-4">
        <p className="text-sm text-gray-500 dark:text-gray-400">
          Standalone Timeline Demo &copy; {new Date().getFullYear()}
        </p>
      </footer>
    </div>
  );
};

export default StandaloneThinkingTimelineApp;
